using System;
using System.Collections.Generic;
namespace DianaScript
{
public partial class BlockExecutor
{

    int FromIndex_int(int a) => a;
    InternString FromIndex_InternString(int a) => new InternString { identity = a };

    public void exec(int[] codes) => exec(codes, codes.Length);
    public void exec(int[] BYTECODE, int bound)
    {
        LOOP_HEAD:
        while (offset < bound)
        {
        var instruction = BYTECODE[offset];
        switch(instruction)
        {
            {% for defi in defs if defi.is_bytecode %}
            case (int) CODETAG.{{defi.name}}:
            {
                {% for field in defi %}
                var {{ field.name }} = FromIndex_{{field.type.name}}(BYTECODE[offset + {{ loop.index }}]);
                {% endfor %}
                {{textwrap.indent(defi.action, " " * 12)}}
                
                offset += {{ len(defi) + 1 }};
                break;
            }
            {% endfor %}
            default:
                throw new InvalidOperationException($"unknown bytecode {instruction}");
            
        }
        }
    }
}
}