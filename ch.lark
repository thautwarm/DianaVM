# 创创子语言前端
%mkrepl



%%
from contextlib import contextmanager
from dianascript.operator_resolve import Operator, binop_reduce
from dianascript.chexpr import *
from dianascript.chlhs import *
from dianascript.chstmt import *
def cons(op):
    def ap(l, r):
        loc, opname = op.val
        return EOp(l, opname, r)
    return ap

def resolve_binop(args):
    if len(args) == 1:
        return args[0]

    for i in range(1, len(args), 2):
        assert isinstance(args[i], tuple)
        op = args[i]
        args[i] = Operator(op[1], op)
    return binop_reduce(cons, args)

def append(xs, x):
    xs.append(x)
    return xs

BLOCKS = [[]]

def enter_block():
    global BLOCKS
    BLOCKS.append([])

def emit(x):
    BLOCKS[-1].append(x)
%%


start : block -> $1

list{e} : e -> [$1]
        | list{e} e  -> append($1, $2) 

seplist{sep, e} : e -> [$1]
                | seplist{sep, e} sep e  -> append($1, $3)
                
nullable{seq} :     -> []
              | seq -> $1

expr_opt:      -> None
        | expr -> $1

lhs_opt : -> None
        | expr -> $1

stmt :   "var" seplist{",", name}              -> SDecl($2) | @1
       | seplist{":=", lhs} ":=" expr                          -> SAssign($1, $3) | @2
       | expr                             -> SExpr($1)
       | "loop" block "end"                        -> SLoop($2) | @1
       | "each" lhs_opt "of" expr "do" block "end" -> SFor($2, $4, $6) | @1
#      | "del" seplist{",", name}              -> SDel($2) | @1
       | "if" expr "then" block "end"          -> SIf($2, $4, None) | @1
       | "if" expr "then" block "else" block "end" -> SIf($2, $4, $6) | @1
       | "break"                                   -> SBreak()
       | "continue"                                -> SContinue()
       | "return" expr_opt                         -> SReturn($2) | @1
       | "func" name "(" nullable{seplist{",", name}} ")" block "end" ->  SFunc($2, $4, $6) | @1


filter{keep, discard} : \
    filter{keep, discard} keep -> append($1, $2)
    | filter{keep, discard} discard -> $1
    | keep -> [$1]
    | discard -> []
    | -> []
block : filter{stmt, NEWLINE} ->  $1


?expr :  or_expr

or_expr : or_expr "or" and_expr -> EOr($1, $3) | @2
        | and_expr              -> $1

and_expr : and_expr "and" not   -> EAnd($1, $3) | @2
         | not                  -> $1


binop : ("<" | ">" |">=" | "<=" | "=" | "!=" | "in" | \
          "+" | "-" | "*" | "**" | "/" | "//" | "%" |\
          "&" | "|" | "<<" | ">>") -> (@1, *1)
        | "not" "in" -> (@1, *1 + *2)

bin : atom (binop atom)*  -> resolve_binop(__args)

not : "not" bin -> ENot($2) | @1
    | bin       -> $1

trailer : "," -> True
        |     -> False

lhs  : NAME                  -> LVar(*1) | @1
     | atom "." "[" expr "]" -> LIt($1, $4) | @2
     | atom "." name         -> LAttr($1, $3) | @2

pair : expr ":" expr         -> ($1, $3)
atom : atom "." "[" expr "]" -> EIt($1, $4) | @2
     | atom "." name         -> EAttr($1, $3) | @2
     | atom "(" nullable{seplist{",", expr}} ")"    -> EApp($1, $3) | @2
     | "[" seplist{",", expr} trailer "]" -> EList($2) | @1
     | "[" "]" -> EList([]) | @1
     | "(" seplist{",", expr} trailer ")" -> EPar($2, $3) | @1
     | "(" ")" -> EPar([], True) | @1
     | "{" seplist{",", pair} trailer "}" -> EDict($2) | @1
     | "{" "}" -> EDict([]) | @1
     | number                             -> EVal(eval(*1)) | @1
     | string                             -> EVal(eval(*1)) | @1
     | "None"    -> EVal(None)  | @1
     | "True"    -> EVal(True)  | @1
     | "False"   -> EVal(False) | @1
     | NAME      -> EVar(*1)    | @1
     | "-" atom  -> ENeg($2)    | @1
     | "~" atom  -> EInv($2)    | @1

     

string: (STRING | LONG_STRING) -> $1
name : NAME -> *1
number: (FLOAT_NUMBER | INT_NUMBER) -> $1

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/

FLOAT_NUMBER.2: /((\d+\.[\d_]*|\.[\d_]+)([Ee][-+]?\d+)?|\d+([Ee][-+]?\d+))/
INT_NUMBER: /(\+|\-)?[1-9]\d*|0[oO][0-7]+|0[xX][\da-fA-F]+|0[bB][01]+|0/

STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

COMMENT: /#[^\n]*/
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//

%import common.WS_INLINE
%import common.NEWLINE
%ignore WS_INLINE
%ignore COMMENT
%ignore /\\[\t \f]*\r?\n/ 
%ignore MULTILINE_COMMENT