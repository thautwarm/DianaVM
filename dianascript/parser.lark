          




  
                                     
                                                               
                                
                               
                                
             
                 
                            
                                
             

                        
                      
                      

                                    
                                         
                    
                                     
                                   

                  
                
             

             

                  
                 
                     

            
                        
  


start : block -> start_0                    

list{e} : e -> list_0                    
        | list{e} e -> list_1                                        

seplist{sep, e} : e -> seplist_0                            
                | seplist{sep, e} sep e -> seplist_1                                                           
                
nullable{seq} : -> nullable_0                          
              | seq -> nullable_1                          

expr_opt: -> expr_opt_0                       
        | expr -> expr_opt_1                     

lhs_opt : -> lhs_opt_0                  
        | lhs -> lhs_opt_1                    

stmt :   "var" seplist{",", name} -> stmt_0                                                                      
       | seplist{":=", lhs} ":=" expr -> stmt_1                                                                            
       | expr -> stmt_2                                                                 
       | "loop" block "end" -> stmt_3                                                                      
       | "each" lhs_opt "of" expr do block "end" -> stmt_4                                                                             
                                                                    
       | "if" expr then block "end" -> stmt_5                                                                              
       | "if" expr then block "else" block "end" -> stmt_6                                                                            
       | "break" -> stmt_7                                                                
       | "continue" -> stmt_8                                                                   
       | "return" expr_opt -> stmt_9                                                                        
       | "func" name "(" nullable{seplist{",", name}} ")"block"end" -> stmt_10                                          

then : NEWLINE? "then"
do : NEWLINE? "do"

filter{keep, discard} :filter{keep, discard} keep -> filter_0                                                 
    | filter{keep, discard} discard -> filter_1                                          
    | keep -> filter_2                   
    | discard -> filter_3                    
    | -> filter_4            
block : filter{stmt, NEWLINE} -> block_0                                     


?expr :  or_expr

or_expr : or_expr "or" and_expr -> or_expr_0                                                    
        | and_expr -> or_expr_1                                      

and_expr : and_expr "and" not -> and_expr_0                                                     
         | not -> and_expr_1                                      


binop : ("<" | ">" |">=" | "<=" | "==" | "!=" | "in" |"+" | "-" | "*" | "**" | "/" | "//" | "%" |"&" | "|" | "<<" | ">>") -> binop_0                                               
        | "not" "in" -> binop_1                                      

bin : atom (binop atom)* -> bin_0                                                   

not : "not" bin -> not_0                                 
    | bin -> not_1                      

trailer : "," -> trailer_0                      
        | -> trailer_1                       

lhs  : NAME -> lhs_0                                              
     | atom "." "[" expr "]" -> lhs_1                                                 
     | atom "." name -> lhs_2                                                   


pair : expr ":" expr -> pair_0                                         
atom : atom "." "[" expr "]" -> atom_0                                                 
     | atom "." name -> atom_1                                                   
     | atom "(" nullable{seplist{",", expr}} ")" -> atom_2                                                                         
     | "[" seplist{",", expr} trailer "]" -> atom_3                                                            
     | "[" "]" -> atom_4                                 
     | "(" seplist{",", expr} trailer ")" -> atom_5                                                               
     | "(" ")" -> atom_6                                      
     | "{" seplist{",", pair} trailer "}" -> atom_7                                                            
     | "{" "}" -> atom_8                                 
     | number -> atom_9                                                                 
     | string -> atom_10                                                                 
     | "None" -> atom_11                                     
     | "True" -> atom_12                                     
     | "False" -> atom_13                                     
     | NAME -> atom_14                                     
     | "-" atom -> atom_15                                     
     | "~" atom -> atom_16                                     

     

string: (STRING | LONG_STRING) -> string_0                                     
name : NAME -> name_0                  
number: (FLOAT_NUMBER | INT_NUMBER) -> number_0                                          

NAME: /[a-zA-Z_][a-zA-Z0-9_]*/

FLOAT_NUMBER.2: /((\d+\.[\d_]*|\.[\d_]+)([Ee][-+]?\d+)?|\d+([Ee][-+]?\d+))/
INT_NUMBER: /(\+|\-)?[1-9]\d*|0[oO][0-7]+|0[xX][\da-fA-F]+|0[bB][01]+|0/

STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is

COMMENT: /#[^\n]*/
MULTILINE_COMMENT: /\/\*(\*(?!\/)|[^*])*\*\//

%import common.WS_INLINE
%import common.NEWLINE
%ignore WS_INLINE
%ignore COMMENT
%ignore /\\[\t \f]*\r?\n/ 
%ignore MULTILINE_COMMENT