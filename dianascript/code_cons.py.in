from __future__ import annotations
from dataclasses import dataclass
from pyrsistent import PVector
from dianascript.serialize import serialize_
from typing import TypeVar, Generic
import struct

_T = TypeVar("_T")

class InternString(str):
    pass
Bytecode = list

special_bit = 0b10000000
true_bit = 0b10000011
false_bit = 0b10000010
none_bit = 0b10000000

obj_box_tags: dict[type, int| None] = {
    int: 0,
    float: 1,
    str: 2,
    dict: 3,
    set: 4,
    list: 5,
    tuple: 6
}

special_objs = {
    (bool, True): true_bit,
    (bool, False): false_bit,
    (type(None), None): none_bit
}

booleans = (false_bit, true_bit)


class DObj:
    o: bool | int | float | str | None
    t: type | None = None
    def __init__(self, o):
        self.o = o
        self.type = type(o)

    def __hash__(self):
        return hash(self.o) ^ id(type)

    def __eq__(self, other):
        if not isinstance(other, DObj):
            return False
        return (self.o == other.o) and (self.type == other.type)
    
    def serialize_(self, barr: bytearray):
        o = self.o
        v = special_objs.get((type(o), o)) # type: ignore
        if v is not None:
            barr.append(v)
            return
        v = obj_box_tags[type(o)]
        if v is not None:
            barr.append(v)
        serialize_(self.o, barr)

def encode_to_7bit(value: int, barr: bytearray):
    data = []
    number = abs(value)
    while number >= 0x80:
        data.append((number | 0x80) & 0xff)
        number >>= 7
    barr.append(number & 0xff)

def serialize_(o, barr: bytearray):
    match o:
        case bool():
            barr.append(booleans[o])
        case int(): 
            barr.extend(struct.pack('<i', o))
        case float():
            barr.extend(struct.pack('<f', o))
        case str(): # or InternString
            encoded = bytes(o, 'utf8')
            encode_to_7bit(len(encoded), barr)
            barr.extend(encoded)
        case dict():
            serialize_(len(o), barr)
            for k, v in o.items():
                serialize_(k, barr)
                serialize_(v, barr)
        case list() | set() | PVector():    
            serialize_(len(o), barr)
            for v in o:  # type: ignore
                serialize_(v, barr)
        case tuple():
            for v in o:  # type: ignore
                serialize_(v, barr)
        case None:
            barr.append(none_bit | special_bit)
        case _:
            o.serialize_(barr)

class Builder(Generic[_T]):
    def __init__(self):
        self._map: dict[_T, int] = {}
        self._revmap: dict[int, _T] = {}
    
    def __getitem__(self, i: int) -> _T:
        return self._revmap[i]

    def __iter__(self):
        for i in range(len(self)):
            yield self._revmap[i]
    
    def __len__(self):
        return len(self._map)

    def cache(self, x: _T) -> int:
        o = object()
        i = self._map.get(x, o)
        if i is o:
            i = self._map[x] = len(self._map)
            self._revmap[i] = x
            return i
        else:
            assert isinstance(i, int)
            return i

    def serialize_(self, arr: bytearray):
        serialize_(len(self), arr)
        for i in range(len(self._revmap)):
            serialize_(self._revmap[i], arr)            

{% for defi in defs if defi.is_bytecode %}
@dataclass(frozen=True)
class {{defi.name}}:
    {% for field in defi %}
    {{field.name}}: {{field.type | PY}}
    {% endfor %}

    TAG = {{defi.tag}}

    def serialize_(self, barr):
        barr.append(self.TAG)
        {% for field in defi %}
        serialize_(as_int(self.{{field.name}}), barr)
        {% endfor %}
{% endfor %}

{% for defi in defs if not defi.is_bytecode and not defi.is_external %}
@dataclass(frozen=True)
class {{defi.name}}:
    {% for field in defi %}
    {{field.name}}: {{field.type | PY}}
    {% endfor %}

    def as_int(self) -> int:
        {% for field in defi %}
        {{field.name}} = as_int(self.{{field.name}})
        {% endfor %}
        return Storage.{{defi.name.lower()}}s.cache(({{ defi | join(', ', attribute='name')   }}))    
{% endfor %}

def as_int(self):
    if isinstance(self, int):
        return self
    {% for defi in defs if defi.is_external %}
    if isinstance(self, {{defi.name}}):
        return self
    {% endfor %}
    return self.as_int()

class Storage:
{% for defi in defs if not defi.is_bytecode %}
    {{defi.name.lower()}}s : Builder[{{defi.name}}] = Builder()
{% endfor %}
    def serialize_(self, barr: bytearray):
    {% for defi in defs if not defi.is_bytecode %}
        self.{{defi.name.lower()}}s.serialize_(barr)
    {% endfor %}
f.internstrings.serialize_(barr)
    
        self.dataclasss.serialize_(barr)
    
        self.dataclasss.serialize_(barr)
    