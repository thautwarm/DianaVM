from __future__ import annotations
from dataclasses import dataclass
from pyrsistent import PVector
from dianascript.serialize import DObj, Builder, InternString, serialize_
from typing import TypeVar, Generic, TYPE_CHECKING
import struct

_T = TypeVar("_T")


if TYPE_CHECKING:
    Bytecode = PVector[int | InternString]

BytecodeBuilder = list[int | InternString]

{% for defi in defs if defi.is_bytecode %}
@dataclass(frozen=True)
class {{defi.name}}:
    {% for field in defi %}
    {{field.name}}: {{field.type | PY}}
    {% endfor %}
    TAG = {{defi.tag}}
    
    OFFSET = {{ len(defi) + 1 }}
    
    def dumps(self, flat_code: BytecodeBuilder):
        flat_code.append(self.TAG)
        {% for field in defi %}
        flat_code.append(self.{{field.name}})
        {% endfor %}
{% endfor %}

{% for defi in defs if not defi.is_bytecode and not defi.is_external %}
@dataclass(frozen=True)
class {{defi.name}}:
    {% for field in defi %}
    {{field.name}}: {{field.type | PY}}
    {% endfor %}
    
    def serialize_(self, barr: bytearray):
    {% for field in defi %}
        serialize_(self.{{field.name}}, barr)
    {% endfor %}

    def as_flatten(self) -> int:
        return Storage.{{defi.name.lower()}}s.cache(self)
{% endfor %}

def as_flatten(self):
    if isinstance(self, int):
        return self
    return self.as_flatten()

class Storage:
{% for defi in defs if not defi.is_bytecode %}
    {{defi.name.lower()}}s : Builder[{{TName(defi.name) | PY}}] = Builder()
{% endfor %}

    @classmethod
    def serialize_(cls, barr: bytearray):
    {% for defi in defs if not defi.is_bytecode %}
        cls.{{defi.name.lower()}}s.serialize_(barr)
    {% endfor %}

class PlaceHolder:
    def __init__(self, OFFSET: int):
        self.OFFSET = OFFSET

Instr = (
    PlaceHolder
    {% for defi in defs if defi.is_bytecode %}
    | {{defi.name}}
    {% endfor %}
)

TypeIndex = [
    {% for defi in defs if defi.is_bytecode %}
    {{defi.name}},
    {% endfor %}
]
