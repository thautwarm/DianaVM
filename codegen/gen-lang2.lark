%%
from __future__ import annotations
%%

%mkrepl
name : TNAME -> str($1)

list{e} : e -> [$1]
        | list{e} e  -> append($1, $2) 

seplist{sep, e} : e -> [$1]
                | seplist{sep, e} sep e  -> append($1, $3)
                
nullable{seq} :     -> []
              | seq -> $1
            

%%

from dataclasses import dataclass, replace
from pyrsistent import PVector, pvector

def append(self, x):
    self.append(x)
    return self

HEAD = "Diana"

@dataclass(frozen=True)
class TArr:
    eltype : Type

@dataclass(frozen=True)
class TTup:
    eltypes : PVector[Type]

@dataclass(frozen=True)
class TName:
    name: str


@dataclass(frozen=True)
class Field:
    type: Type
    name: str

Type = TName | TTup | TArr
    
@dataclass(frozen=True)
class Def:
    name: str
    fields: PVector[Field] = pvector([])
    is_external : bool = False
    is_bytecode : bool = False
    action: str = ""
    tag: int = -1

    def __iter__(self):
        yield from self.fields
    def __len__(self):
        return len(self.fields)

tag_counter = [0]
def next_tag():
    x = tag_counter[0]
    tag_counter[0] += 1
    return x
%%

type : "(" seplist{",", type} ")" -> TTup($2)
     | type "[" "]"               -> TArr($1)
     | name                       -> TName($1)
     | name "<" seplist{",", type}  ">" -> TGen(TName($1), $2)

field : name ":" type -> Field($3, $1)
      | type name     -> Field($1, $2)
    
byte_type : name -> TName(*1)

operand_field : name ":" byte_type -> Field($3, $1)
              | byte_type name     -> Field($1, $2)

topl : "data" name -> Def(name=$2, is_external=True)
     | "dataclass" name "(" seplist{",", field} ")" ->\
        Def(name=$2, fields=$4)
     | name "(" nullable{seplist{",", operand_field}}  ")" ESCAPED_CODE -> \
        Def(name= HEAD + "_" + $1, fields=$3, is_bytecode=True, action=*5[2:-2], tag=next_tag())

     | name "(" nullable{seplist{",", operand_field}}  ")" from_list  ESCAPED_CODE ->\
        [ Def(name= HEAD + "_" + _rep($1, x), fields=$3, is_bytecode=True, action=_rep(*6[2:-2], x), tag=next_tag()) for x in $5 ]


from_list : "from" "{" list{name} "}" -> $3

langname : "language" name -> globals().update(HEAD=$2)
start : langname  list{topl} -> _join_defs($2)

%%
def _rep(s: str, x):
    return s.replace("$$", x)
def _template(defi: Def, xs: list[str]):
    hd, *tl = xs
    defhd = replace(defi, name=defi.name.replace("$$", hd), action=defi.action.replace("$$", hd))
    deftl = [
        replace(
            defi,
            name=defi.name.replace("$$", each),
            action=defi.action.replace("$$", each),
            tag=defi.tag if not defi.is_bytecode else next_tag())
        for each in tl
    ]
    return [defhd, *deftl]

def _join_defs(xs):
    res = []
    for x in xs:
        if isinstance(x, list):
            res.extend(x)
        else:
            res.append(x)
    return res
%%

%import common.WS
%import common.ESCAPED_STRING
%import common.LETTER
%import common.DIGIT
%ignore WS
%ignore COMMENT
COMMENT: /\s*/ "//" /[^\n]/*
TNAME: ("_"|"$"|LETTER) ("_"|"$"|LETTER|DIGIT)*
ESCAPED_CODE : /\[%[^%]*?%\]/
